name: Create Release

on:
  workflow_run:
    # dependency: "Build, Test & Deploy"
    workflows: ["Build, Test & Deploy"]
    types:
      - completed

permissions:
  contents: write

jobs:
  release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 1: download the artifact created in the previous workflow
      - name: Download Artifact Zip Data
        uses: actions/github-script@v6
        id: download
        with:
          script: |
            const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.event.workflow_run.id }},
            });

            // ⚡️ FIX: Artifact- name change to 'release-data-artifact'
            const matchArtifact = artifacts.artifacts.find(artifact => artifact.name === 'release-data-artifact'); 

            if (!matchArtifact) {
              core.setFailed('Could not find artifact release-data-artifact'); // erorr message change
              return;
            }

            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
            });

            const fs = require('fs');
            fs.writeFileSync('release-data.zip', Buffer.from(download.data));

      # Step 2: Unzip the file and extract data
      - name: Unzip and Load Tag Data
        id: load_data
        run: |
          #  Unzip the downloaded artifact
          unzip release-data.zip -d release-data

          echo "### Loaded release_data.txt contents ###" 
          cat release-data/release_data.txt 
          echo "########################################"

          # step 3: Export data as environment variables

          # VERSION_TAG load
          VERSION_TAG=$(grep "^VERSION_TAG=" release-data/release_data.txt | cut -d'=' -f2)
          echo "RELEASE_VERSION=$VERSION_TAG" >> $GITHUB_ENV

          # FULL_IMAGE_NAME  load
          FULL_IMAGE_NAME=$(grep "^FULL_IMAGE_NAME=" release-data/release_data.txt | cut -d'=' -f2)
          echo "IMAGE_NAME=$FULL_IMAGE_NAME" >> $GITHUB_ENV

          # DOCKER_TAGS load
          DOCKER_TAGS=$(grep "^DOCKER_TAGS=" release-data/release_data.txt | cut -d'=' -f2)
          echo "DOCKER_TAGS=$DOCKER_TAGS" >> $GITHUB_ENV

          echo "✅ Environment variables set successfully."
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          name: Release ${{ env.RELEASE_VERSION }}

          body: |
            🚀 **New Release Published**

            This release corresponds to the tag **${{ env.RELEASE_VERSION }}**

            ### Docker Images Pushed
            The application was built and pushed with the following tags:
            - **Version Tag:** `${{ env.IMAGE_NAME }}:${{ env.RELEASE_VERSION }}`
            - **Latest Tag:** `${{ env.IMAGE_NAME }}:latest`
            - **All Tags:** `${{ env.DOCKER_TAGS }}`

            ---

            View build workflow run: ${{ github.event.workflow_run.html_url }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
